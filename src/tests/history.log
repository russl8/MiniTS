[2025-08-06 20:03:37] ===============================================================
[2025-08-06 20:03:37] EXECUTION STARTED
[2025-08-06 20:03:37] Arguments: [src/tests/examples/]
[2025-08-06 20:03:37] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:03:37] Java Version: 17.0.15
[2025-08-06 20:03:37] ===============================================================
[2025-08-06 20:03:37] Processing directory: C:\Users\ourai\Git\EECS4302Compiler-1\src\tests\examples
[2025-08-06 20:03:37] Found 10 file(s) to process
[2025-08-06 20:03:37] Processing file 1/10: bank_account.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: BankAccount
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * checkStatus
[2025-08-06 20:03:37]     * compareBalance
[2025-08-06 20:03:37]   Variables: 4
[2025-08-06 20:03:37]     * minBalance: INT = 100
[2025-08-06 20:03:37]     * comparison: BOOL = true
[2025-08-06 20:03:37]     * balance: INT = 500
[2025-08-06 20:03:37]     * status: CHAR = 'A'
[2025-08-06 20:03:37] -------------------------BankAccount-------------------------
[2025-08-06 20:03:37] Functions: {checkStatus=function checkStatus ( dummy : INT ) : CHAR {
result : CHAR = L
if (balance > minBalance) {
        result = A
    }
if (balance == minBalance) {
        result = W
    }
return result
}
, compareBalance=function compareBalance ( other : INT ) : BOOL {
isHigher : BOOL = balance > other
isEqual : BOOL = balance == other
isLower : BOOL = balance < other
return isHigher
}
}
[2025-08-06 20:03:37] Variables: {Vars: checkStatus=CHAR, minBalance=INT, comparison=BOOL, balance=INT, Vars: compareBalance=BOOL, status=CHAR}
[2025-08-06 20:03:37] Evaluated Variables: {minBalance={type=INT, value=100}, comparison={type=BOOL, value=true}, balance={type=INT, value=500}, status={type=CHAR, value=A}}
[2025-08-06 20:03:37] Generated report: src/tests/bank_account-report.html
[2025-08-06 20:03:37] Processing file 2/10: calculator.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Calculator
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * compare
[2025-08-06 20:03:37]     * evaluate
[2025-08-06 20:03:37]   Variables: 4
[2025-08-06 20:03:37]     * threshold: INT = 20
[2025-08-06 20:03:37]     * comparison: BOOL = true
[2025-08-06 20:03:37]     * category: CHAR = 'M'
[2025-08-06 20:03:37]     * value: INT = 25
[2025-08-06 20:03:37] -------------------------Calculator-------------------------
[2025-08-06 20:03:37] Functions: {compare=function compare ( input : INT ) : BOOL {
isGreater : BOOL = input > threshold
return isGreater
}
, evaluate=function evaluate ( testValue : INT ) : CHAR {
result : CHAR = L
if (testValue >= 30) {
        result = H
    }
if (testValue >= 20) {
        result = M
    }
return result
}
}
[2025-08-06 20:03:37] Variables: {comparison=BOOL, Vars: compare=BOOL, threshold=INT, category=CHAR, value=INT, Vars: evaluate=CHAR}
[2025-08-06 20:03:37] Evaluated Variables: {threshold={type=INT, value=20}, comparison={type=BOOL, value=true}, category={type=CHAR, value=M}, value={type=INT, value=25}}
[2025-08-06 20:03:37] Generated report: src/tests/calculator-report.html
[2025-08-06 20:03:37] Processing file 3/10: employee.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Employee
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * updateStatus
[2025-08-06 20:03:37]     * checkAccess
[2025-08-06 20:03:37]   Variables: 5
[2025-08-06 20:03:37]     * accessGranted: BOOL = true
[2025-08-06 20:03:37]     * accessLevel: INT = 5
[2025-08-06 20:03:37]     * isActive: BOOL = true
[2025-08-06 20:03:37]     * isVerified: BOOL = false
[2025-08-06 20:03:37]     * currentStatus: BOOL = false
[2025-08-06 20:03:37] -------------------------Employee-------------------------
[2025-08-06 20:03:37] Functions: {updateStatus=function updateStatus ( newActive : BOOL ) : BOOL {
isActive = newActive
return isActive
}
, checkAccess=function checkAccess ( requiredLevel : INT ) : BOOL {
hasAccess : BOOL = isActive && accessLevel >= requiredLevel
return hasAccess
}
}
[2025-08-06 20:03:37] Variables: {accessGranted=BOOL, accessLevel=INT, isVerified=BOOL, currentStatus=BOOL, Vars: checkAccess=BOOL, isActive=BOOL, Vars: updateStatus=BOOL}
[2025-08-06 20:03:37] Evaluated Variables: {accessGranted={type=BOOL, value=true}, accessLevel={type=INT, value=5}, isActive={type=BOOL, value=true}, isVerified={type=BOOL, value=false}, currentStatus={type=BOOL, value=false}}
[2025-08-06 20:03:37] Generated report: src/tests/employee-report.html
[2025-08-06 20:03:37] Processing file 4/10: fleet.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Vehicle
[2025-08-06 20:03:37]   Functions: 1
[2025-08-06 20:03:37]     * checkAndRefuel
[2025-08-06 20:03:37]   Variables: 5
[2025-08-06 20:03:37]     * fuel2: INT = 95
[2025-08-06 20:03:37]     * fuelLevel: INT = 75
[2025-08-06 20:03:37]     * vehicleId: INT = 1001
[2025-08-06 20:03:37]     * needsRefuel: BOOL = false
[2025-08-06 20:03:37]     * fuel1: INT = 85
[2025-08-06 20:03:37] -------------------------Vehicle-------------------------
[2025-08-06 20:03:37] Functions: {checkAndRefuel=function checkAndRefuel ( amount : INT ) : INT {
fuelLevel = fuelLevel + amount
if (fuelLevel > 90) {
        needsRefuel = False
    }
if (fuelLevel <= 90) {
        needsRefuel = True
    }
return fuelLevel
}
}
[2025-08-06 20:03:37] Variables: {fuelLevel=INT, Vars: checkAndRefuel=INT, fuel2=INT, vehicleId=INT, needsRefuel=BOOL, fuel1=INT}
[2025-08-06 20:03:37] Evaluated Variables: {fuel2={type=INT, value=95}, fuelLevel={type=INT, value=75}, vehicleId={type=INT, value=1001}, needsRefuel={type=BOOL, value=false}, fuel1={type=INT, value=85}}
[2025-08-06 20:03:37] Generated report: src/tests/fleet-report.html
[2025-08-06 20:03:37] Processing file 5/10: gaming.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Player
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * calculateBonus
[2025-08-06 20:03:37]     * getScore
[2025-08-06 20:03:37]   Variables: 4
[2025-08-06 20:03:37]     * score: INT = 100
[2025-08-06 20:03:37]     * bonusScore: INT = 150
[2025-08-06 20:03:37]     * classScore: INT = 100
[2025-08-06 20:03:37]     * level: INT = 1
[2025-08-06 20:03:37] -------------------------Player-------------------------
[2025-08-06 20:03:37] Functions: {calculateBonus=function calculateBonus ( multiplier : INT ) : INT {
score : INT = 50 * multiplier
return score
}
, getScore=function getScore ( dummy : INT ) : INT {
return score
}
}
[2025-08-06 20:03:37] Variables: {score=INT, bonusScore=INT, level=INT, Vars: calculateBonus=INT, classScore=INT, Vars: getScore=INT}
[2025-08-06 20:03:37] Evaluated Variables: {score={type=INT, value=100}, bonusScore={type=INT, value=150}, classScore={type=INT, value=100}, level={type=INT, value=1}}
[2025-08-06 20:03:37] Generated report: src/tests/gaming-report.html
[2025-08-06 20:03:37] Processing file 6/10: inventory.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Product
[2025-08-06 20:03:37]   Functions: 1
[2025-08-06 20:03:37]     * updateQuantity
[2025-08-06 20:03:37]   Variables: 2
[2025-08-06 20:03:37]     * quantity: INT = 50
[2025-08-06 20:03:37]     * productId: INT = 101
[2025-08-06 20:03:37] Class: Warehouse
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * updateQuantity
[2025-08-06 20:03:37]     * getLocation
[2025-08-06 20:03:37]   Variables: 5
[2025-08-06 20:03:37]     * location: CHAR = 'A'
[2025-08-06 20:03:37]     * quantity: INT = 50
[2025-08-06 20:03:37]     * newQuantity: INT = 75
[2025-08-06 20:03:37]     * productId: INT = 101
[2025-08-06 20:03:37]     * currentLocation: CHAR = 'A'
[2025-08-06 20:03:37] -------------------------Product-------------------------
[2025-08-06 20:03:37] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
}
[2025-08-06 20:03:37] Variables: {quantity=INT, productId=INT, Vars: updateQuantity=INT}
[2025-08-06 20:03:37] Evaluated Variables: {quantity={type=INT, value=50}, productId={type=INT, value=101}}
[2025-08-06 20:03:37] -------------------------Warehouse-------------------------
[2025-08-06 20:03:37] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
, getLocation=function getLocation ( dummy : INT ) : CHAR {
return location
}
}
[2025-08-06 20:03:37] Variables: {quantity=INT, Vars: getLocation=CHAR, productId=INT, Vars: updateQuantity=INT, location=CHAR, newQuantity=INT, currentLocation=CHAR}
[2025-08-06 20:03:37] Evaluated Variables: {location={type=CHAR, value=A}, quantity={type=INT, value=50}, newQuantity={type=INT, value=75}, productId={type=INT, value=101}, currentLocation={type=CHAR, value=A}}
[2025-08-06 20:03:37] Generated report: src/tests/inventory-report.html
[2025-08-06 20:03:37] Processing file 7/10: library.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Library
[2025-08-06 20:03:37]   Functions: 1
[2025-08-06 20:03:37]     * checkout
[2025-08-06 20:03:37]   Variables: 3
[2025-08-06 20:03:37]     * checkedOut: INT = 0
[2025-08-06 20:03:37]     * totalBooks: INT = 10
[2025-08-06 20:03:37]     * finalBooks: INT = 7
[2025-08-06 20:03:37] -------------------------Library-------------------------
[2025-08-06 20:03:37] Functions: {checkout=function checkout ( limit : INT ) : INT {
while (checkedOut < limit) {
totalBooks = totalBooks - 1
checkedOut = checkedOut + 1
}
return totalBooks
}
}
[2025-08-06 20:03:37] Variables: {checkedOut=INT, Vars: checkout=INT, finalBooks=INT, totalBooks=INT}
[2025-08-06 20:03:37] Evaluated Variables: {checkedOut={type=INT, value=0}, totalBooks={type=INT, value=10}, finalBooks={type=INT, value=7}}
[2025-08-06 20:03:37] Generated report: src/tests/library-report.html
[2025-08-06 20:03:37] Processing file 8/10: student.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: Student
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * updateGrade
[2025-08-06 20:03:37]     * addCredits
[2025-08-06 20:03:37]   Variables: 5
[2025-08-06 20:03:37]     * studentId: INT = 12345
[2025-08-06 20:03:37]     * finalGrade: INT = 92
[2025-08-06 20:03:37]     * totalCredits: INT = 15
[2025-08-06 20:03:37]     * credits: INT = 12
[2025-08-06 20:03:37]     * grade: INT = 85
[2025-08-06 20:03:37] -------------------------Student-------------------------
[2025-08-06 20:03:37] Functions: {updateGrade=function updateGrade ( newGrade : INT ) : INT {
grade = newGrade
return grade
}
, addCredits=function addCredits ( additionalCredits : INT ) : INT {
credits = credits + additionalCredits
return credits
}
}
[2025-08-06 20:03:37] Variables: {studentId=INT, totalCredits=INT, Vars: updateGrade=INT, credits=INT, grade=INT, finalGrade=INT, Vars: addCredits=INT}
[2025-08-06 20:03:37] Evaluated Variables: {studentId={type=INT, value=12345}, finalGrade={type=INT, value=92}, totalCredits={type=INT, value=15}, credits={type=INT, value=12}, grade={type=INT, value=85}}
[2025-08-06 20:03:37] Generated report: src/tests/student-report.html
[2025-08-06 20:03:37] Processing file 9/10: task_manager.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: TaskManager
[2025-08-06 20:03:37]   Functions: 1
[2025-08-06 20:03:37]     * processTasks
[2025-08-06 20:03:37]   Variables: 3
[2025-08-06 20:03:37]     * processedCount: INT = 5
[2025-08-06 20:03:37]     * completedTasks: INT = 0
[2025-08-06 20:03:37]     * totalTasks: INT = 0
[2025-08-06 20:03:37] -------------------------TaskManager-------------------------
[2025-08-06 20:03:37] Functions: {processTasks=function processTasks ( limit : INT ) : INT {
for (
i : INT = 1; i <= limit; i = i + 1) {
totalTasks = totalTasks + 1
if (i <= 3) {
        completedTasks = completedTasks + 1
    }
}

return totalTasks
}
}
[2025-08-06 20:03:37] Variables: {completedTasks=INT, Vars: processTasks=INT, processedCount=INT, totalTasks=INT}
[2025-08-06 20:03:37] Evaluated Variables: {processedCount={type=INT, value=5}, completedTasks={type=INT, value=0}, totalTasks={type=INT, value=0}}
[2025-08-06 20:03:37] Generated report: src/tests/task_manager-report.html
[2025-08-06 20:03:37] Processing file 10/10: weather.txt
[2025-08-06 20:03:37] No semantic errors found
[2025-08-06 20:03:37] Class: WeatherStation
[2025-08-06 20:03:37]   Functions: 2
[2025-08-06 20:03:37]     * setRain
[2025-08-06 20:03:37]     * setClear
[2025-08-06 20:03:37]   Variables: 5
[2025-08-06 20:03:37]     * clearAlert: INT = 2001
[2025-08-06 20:03:37]     * etaRange: LIST_INT = [5, 10]
[2025-08-06 20:03:37]     * rainAlert: INT = 2001
[2025-08-06 20:03:37]     * weatherCode: LIST_CHAR = [C, L, E, A, R]
[2025-08-06 20:03:37]     * stationId: INT = 2001
[2025-08-06 20:03:37] -------------------------WeatherStation-------------------------
[2025-08-06 20:03:37] Functions: {setRain=function setRain ( dummy : INT ) : INT {
weatherCode = [R, A, I, N]
etaRange = [15, 30]
return stationId
}
, setClear=function setClear ( dummy : INT ) : INT {
weatherCode = [C, L, E, A, R]
etaRange = [5, 10]
return stationId
}
}
[2025-08-06 20:03:37] Variables: {weatherCode=LIST_CHAR, clearAlert=INT, etaRange=LIST_INT, Vars: setRain=INT, rainAlert=INT, stationId=INT, Vars: setClear=INT}
[2025-08-06 20:03:37] Evaluated Variables: {clearAlert={type=INT, value=2001}, etaRange={type=LIST_INT, value=[5, 10]}, rainAlert={type=INT, value=2001}, weatherCode={type=LIST_CHAR, value=[C, L, E, A, R]}, stationId={type=INT, value=2001}}
[2025-08-06 20:03:37] Generated report: src/tests/weather-report.html
[2025-08-06 20:03:37] Processing Summary - Success: 10, Failures: 0
[2025-08-06 20:04:26] ===============================================================
[2025-08-06 20:04:26] EXECUTION STARTED
[2025-08-06 20:04:26] Arguments: [src/tests/examples/]
[2025-08-06 20:04:26] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:04:26] Java Version: 17.0.15
[2025-08-06 20:04:26] ===============================================================
[2025-08-06 20:04:26] Processing directory: C:\Users\ourai\Git\EECS4302Compiler-1\src\tests\examples
[2025-08-06 20:04:26] Found 10 file(s) to process
[2025-08-06 20:04:26] Processing file 1/10: bank_account.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: BankAccount
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * checkStatus
[2025-08-06 20:04:26]     * compareBalance
[2025-08-06 20:04:26]   Variables: 4
[2025-08-06 20:04:26]     * minBalance: INT = 100
[2025-08-06 20:04:26]     * comparison: BOOL = true
[2025-08-06 20:04:26]     * balance: INT = 500
[2025-08-06 20:04:26]     * status: CHAR = 'A'
[2025-08-06 20:04:26] -------------------------BankAccount-------------------------
[2025-08-06 20:04:26] Functions: {checkStatus=function checkStatus ( dummy : INT ) : CHAR {
result : CHAR = L
if (balance > minBalance) {
        result = A
    }
if (balance == minBalance) {
        result = W
    }
return result
}
, compareBalance=function compareBalance ( other : INT ) : BOOL {
isHigher : BOOL = balance > other
isEqual : BOOL = balance == other
isLower : BOOL = balance < other
return isHigher
}
}
[2025-08-06 20:04:26] Variables: {Vars: checkStatus=CHAR, minBalance=INT, comparison=BOOL, balance=INT, Vars: compareBalance=BOOL, status=CHAR}
[2025-08-06 20:04:26] Evaluated Variables: {minBalance={type=INT, value=100}, comparison={type=BOOL, value=true}, balance={type=INT, value=500}, status={type=CHAR, value=A}}
[2025-08-06 20:04:26] Generated report: src/tests/bank_account-report.html
[2025-08-06 20:04:26] Processing file 2/10: calculator.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Calculator
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * compare
[2025-08-06 20:04:26]     * evaluate
[2025-08-06 20:04:26]   Variables: 4
[2025-08-06 20:04:26]     * threshold: INT = 20
[2025-08-06 20:04:26]     * comparison: BOOL = true
[2025-08-06 20:04:26]     * category: CHAR = 'M'
[2025-08-06 20:04:26]     * value: INT = 25
[2025-08-06 20:04:26] -------------------------Calculator-------------------------
[2025-08-06 20:04:26] Functions: {compare=function compare ( input : INT ) : BOOL {
isGreater : BOOL = input > threshold
return isGreater
}
, evaluate=function evaluate ( testValue : INT ) : CHAR {
result : CHAR = L
if (testValue >= 30) {
        result = H
    }
if (testValue >= 20) {
        result = M
    }
return result
}
}
[2025-08-06 20:04:26] Variables: {comparison=BOOL, Vars: compare=BOOL, threshold=INT, category=CHAR, value=INT, Vars: evaluate=CHAR}
[2025-08-06 20:04:26] Evaluated Variables: {threshold={type=INT, value=20}, comparison={type=BOOL, value=true}, category={type=CHAR, value=M}, value={type=INT, value=25}}
[2025-08-06 20:04:26] Generated report: src/tests/calculator-report.html
[2025-08-06 20:04:26] Processing file 3/10: employee.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Employee
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * updateStatus
[2025-08-06 20:04:26]     * checkAccess
[2025-08-06 20:04:26]   Variables: 5
[2025-08-06 20:04:26]     * accessGranted: BOOL = true
[2025-08-06 20:04:26]     * accessLevel: INT = 5
[2025-08-06 20:04:26]     * isActive: BOOL = true
[2025-08-06 20:04:26]     * isVerified: BOOL = false
[2025-08-06 20:04:26]     * currentStatus: BOOL = false
[2025-08-06 20:04:26] -------------------------Employee-------------------------
[2025-08-06 20:04:26] Functions: {updateStatus=function updateStatus ( newActive : BOOL ) : BOOL {
isActive = newActive
return isActive
}
, checkAccess=function checkAccess ( requiredLevel : INT ) : BOOL {
hasAccess : BOOL = isActive && accessLevel >= requiredLevel
return hasAccess
}
}
[2025-08-06 20:04:26] Variables: {accessGranted=BOOL, accessLevel=INT, isVerified=BOOL, currentStatus=BOOL, Vars: checkAccess=BOOL, isActive=BOOL, Vars: updateStatus=BOOL}
[2025-08-06 20:04:26] Evaluated Variables: {accessGranted={type=BOOL, value=true}, accessLevel={type=INT, value=5}, isActive={type=BOOL, value=true}, isVerified={type=BOOL, value=false}, currentStatus={type=BOOL, value=false}}
[2025-08-06 20:04:26] Generated report: src/tests/employee-report.html
[2025-08-06 20:04:26] Processing file 4/10: fleet.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Vehicle
[2025-08-06 20:04:26]   Functions: 1
[2025-08-06 20:04:26]     * checkAndRefuel
[2025-08-06 20:04:26]   Variables: 5
[2025-08-06 20:04:26]     * fuel2: INT = 95
[2025-08-06 20:04:26]     * fuelLevel: INT = 75
[2025-08-06 20:04:26]     * vehicleId: INT = 1001
[2025-08-06 20:04:26]     * needsRefuel: BOOL = false
[2025-08-06 20:04:26]     * fuel1: INT = 85
[2025-08-06 20:04:26] -------------------------Vehicle-------------------------
[2025-08-06 20:04:26] Functions: {checkAndRefuel=function checkAndRefuel ( amount : INT ) : INT {
fuelLevel = fuelLevel + amount
if (fuelLevel > 90) {
        needsRefuel = False
    }
if (fuelLevel <= 90) {
        needsRefuel = True
    }
return fuelLevel
}
}
[2025-08-06 20:04:26] Variables: {fuelLevel=INT, Vars: checkAndRefuel=INT, fuel2=INT, vehicleId=INT, needsRefuel=BOOL, fuel1=INT}
[2025-08-06 20:04:26] Evaluated Variables: {fuel2={type=INT, value=95}, fuelLevel={type=INT, value=75}, vehicleId={type=INT, value=1001}, needsRefuel={type=BOOL, value=false}, fuel1={type=INT, value=85}}
[2025-08-06 20:04:26] Generated report: src/tests/fleet-report.html
[2025-08-06 20:04:26] Processing file 5/10: gaming.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Player
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * calculateBonus
[2025-08-06 20:04:26]     * getScore
[2025-08-06 20:04:26]   Variables: 4
[2025-08-06 20:04:26]     * score: INT = 100
[2025-08-06 20:04:26]     * bonusScore: INT = 150
[2025-08-06 20:04:26]     * classScore: INT = 100
[2025-08-06 20:04:26]     * level: INT = 1
[2025-08-06 20:04:26] -------------------------Player-------------------------
[2025-08-06 20:04:26] Functions: {calculateBonus=function calculateBonus ( multiplier : INT ) : INT {
score : INT = 50 * multiplier
return score
}
, getScore=function getScore ( dummy : INT ) : INT {
return score
}
}
[2025-08-06 20:04:26] Variables: {score=INT, bonusScore=INT, level=INT, Vars: calculateBonus=INT, classScore=INT, Vars: getScore=INT}
[2025-08-06 20:04:26] Evaluated Variables: {score={type=INT, value=100}, bonusScore={type=INT, value=150}, classScore={type=INT, value=100}, level={type=INT, value=1}}
[2025-08-06 20:04:26] Generated report: src/tests/gaming-report.html
[2025-08-06 20:04:26] Processing file 6/10: inventory.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Product
[2025-08-06 20:04:26]   Functions: 1
[2025-08-06 20:04:26]     * updateQuantity
[2025-08-06 20:04:26]   Variables: 2
[2025-08-06 20:04:26]     * quantity: INT = 50
[2025-08-06 20:04:26]     * productId: INT = 101
[2025-08-06 20:04:26] Class: Warehouse
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * updateQuantity
[2025-08-06 20:04:26]     * getLocation
[2025-08-06 20:04:26]   Variables: 5
[2025-08-06 20:04:26]     * location: CHAR = 'A'
[2025-08-06 20:04:26]     * quantity: INT = 50
[2025-08-06 20:04:26]     * newQuantity: INT = 75
[2025-08-06 20:04:26]     * productId: INT = 101
[2025-08-06 20:04:26]     * currentLocation: CHAR = 'A'
[2025-08-06 20:04:26] -------------------------Product-------------------------
[2025-08-06 20:04:26] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
}
[2025-08-06 20:04:26] Variables: {quantity=INT, productId=INT, Vars: updateQuantity=INT}
[2025-08-06 20:04:26] Evaluated Variables: {quantity={type=INT, value=50}, productId={type=INT, value=101}}
[2025-08-06 20:04:26] -------------------------Warehouse-------------------------
[2025-08-06 20:04:26] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
, getLocation=function getLocation ( dummy : INT ) : CHAR {
return location
}
}
[2025-08-06 20:04:26] Variables: {quantity=INT, Vars: getLocation=CHAR, productId=INT, Vars: updateQuantity=INT, location=CHAR, newQuantity=INT, currentLocation=CHAR}
[2025-08-06 20:04:26] Evaluated Variables: {location={type=CHAR, value=A}, quantity={type=INT, value=50}, newQuantity={type=INT, value=75}, productId={type=INT, value=101}, currentLocation={type=CHAR, value=A}}
[2025-08-06 20:04:26] Generated report: src/tests/inventory-report.html
[2025-08-06 20:04:26] Processing file 7/10: library.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Library
[2025-08-06 20:04:26]   Functions: 1
[2025-08-06 20:04:26]     * checkout
[2025-08-06 20:04:26]   Variables: 3
[2025-08-06 20:04:26]     * checkedOut: INT = 0
[2025-08-06 20:04:26]     * totalBooks: INT = 10
[2025-08-06 20:04:26]     * finalBooks: INT = 7
[2025-08-06 20:04:26] -------------------------Library-------------------------
[2025-08-06 20:04:26] Functions: {checkout=function checkout ( limit : INT ) : INT {
while (checkedOut < limit) {
totalBooks = totalBooks - 1
checkedOut = checkedOut + 1
}
return totalBooks
}
}
[2025-08-06 20:04:26] Variables: {checkedOut=INT, Vars: checkout=INT, finalBooks=INT, totalBooks=INT}
[2025-08-06 20:04:26] Evaluated Variables: {checkedOut={type=INT, value=0}, totalBooks={type=INT, value=10}, finalBooks={type=INT, value=7}}
[2025-08-06 20:04:26] Generated report: src/tests/library-report.html
[2025-08-06 20:04:26] Processing file 8/10: student.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: Student
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * updateGrade
[2025-08-06 20:04:26]     * addCredits
[2025-08-06 20:04:26]   Variables: 5
[2025-08-06 20:04:26]     * studentId: INT = 12345
[2025-08-06 20:04:26]     * finalGrade: INT = 92
[2025-08-06 20:04:26]     * totalCredits: INT = 15
[2025-08-06 20:04:26]     * credits: INT = 12
[2025-08-06 20:04:26]     * grade: INT = 85
[2025-08-06 20:04:26] -------------------------Student-------------------------
[2025-08-06 20:04:26] Functions: {updateGrade=function updateGrade ( newGrade : INT ) : INT {
grade = newGrade
return grade
}
, addCredits=function addCredits ( additionalCredits : INT ) : INT {
credits = credits + additionalCredits
return credits
}
}
[2025-08-06 20:04:26] Variables: {studentId=INT, totalCredits=INT, Vars: updateGrade=INT, credits=INT, grade=INT, finalGrade=INT, Vars: addCredits=INT}
[2025-08-06 20:04:26] Evaluated Variables: {studentId={type=INT, value=12345}, finalGrade={type=INT, value=92}, totalCredits={type=INT, value=15}, credits={type=INT, value=12}, grade={type=INT, value=85}}
[2025-08-06 20:04:26] Generated report: src/tests/student-report.html
[2025-08-06 20:04:26] Processing file 9/10: task_manager.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: TaskManager
[2025-08-06 20:04:26]   Functions: 1
[2025-08-06 20:04:26]     * processTasks
[2025-08-06 20:04:26]   Variables: 3
[2025-08-06 20:04:26]     * processedCount: INT = 5
[2025-08-06 20:04:26]     * completedTasks: INT = 0
[2025-08-06 20:04:26]     * totalTasks: INT = 0
[2025-08-06 20:04:26] -------------------------TaskManager-------------------------
[2025-08-06 20:04:26] Functions: {processTasks=function processTasks ( limit : INT ) : INT {
for (
i : INT = 1; i <= limit; i = i + 1) {
totalTasks = totalTasks + 1
if (i <= 3) {
        completedTasks = completedTasks + 1
    }
}

return totalTasks
}
}
[2025-08-06 20:04:26] Variables: {completedTasks=INT, Vars: processTasks=INT, processedCount=INT, totalTasks=INT}
[2025-08-06 20:04:26] Evaluated Variables: {processedCount={type=INT, value=5}, completedTasks={type=INT, value=0}, totalTasks={type=INT, value=0}}
[2025-08-06 20:04:26] Generated report: src/tests/task_manager-report.html
[2025-08-06 20:04:26] Processing file 10/10: weather.txt
[2025-08-06 20:04:26] No semantic errors found
[2025-08-06 20:04:26] Class: WeatherStation
[2025-08-06 20:04:26]   Functions: 2
[2025-08-06 20:04:26]     * setRain
[2025-08-06 20:04:26]     * setClear
[2025-08-06 20:04:26]   Variables: 5
[2025-08-06 20:04:26]     * clearAlert: INT = 2001
[2025-08-06 20:04:26]     * etaRange: LIST_INT = [5, 10]
[2025-08-06 20:04:26]     * rainAlert: INT = 2001
[2025-08-06 20:04:26]     * weatherCode: LIST_CHAR = [C, L, E, A, R]
[2025-08-06 20:04:26]     * stationId: INT = 2001
[2025-08-06 20:04:26] -------------------------WeatherStation-------------------------
[2025-08-06 20:04:26] Functions: {setRain=function setRain ( dummy : INT ) : INT {
weatherCode = [R, A, I, N]
etaRange = [15, 30]
return stationId
}
, setClear=function setClear ( dummy : INT ) : INT {
weatherCode = [C, L, E, A, R]
etaRange = [5, 10]
return stationId
}
}
[2025-08-06 20:04:26] Variables: {weatherCode=LIST_CHAR, clearAlert=INT, etaRange=LIST_INT, Vars: setRain=INT, rainAlert=INT, stationId=INT, Vars: setClear=INT}
[2025-08-06 20:04:26] Evaluated Variables: {clearAlert={type=INT, value=2001}, etaRange={type=LIST_INT, value=[5, 10]}, rainAlert={type=INT, value=2001}, weatherCode={type=LIST_CHAR, value=[C, L, E, A, R]}, stationId={type=INT, value=2001}}
[2025-08-06 20:04:26] Generated report: src/tests/weather-report.html
[2025-08-06 20:04:26] Processing Summary - Success: 10, Failures: 0
[2025-08-06 20:04:26] Generated combined report at src/tests/combined-report.html
[2025-08-06 20:04:26] ===============================================================
[2025-08-06 20:04:26] EXECUTION COMPLETED
[2025-08-06 20:04:26] ===============================================================
[2025-08-06 20:04:26] 
[2025-08-06 20:06:57] ===============================================================
[2025-08-06 20:06:57] EXECUTION STARTED
[2025-08-06 20:06:57] Arguments: [src/tests/examples/]
[2025-08-06 20:06:57] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:06:57] Java Version: 17.0.15
[2025-08-06 20:06:57] ===============================================================
[2025-08-06 20:06:57] Error: The specified path does not exist.
[2025-08-06 20:07:16] ===============================================================
[2025-08-06 20:07:16] EXECUTION STARTED
[2025-08-06 20:07:16] Arguments: [src/tests/examples/]
[2025-08-06 20:07:16] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:07:16] Java Version: 17.0.15
[2025-08-06 20:07:16] ===============================================================
[2025-08-06 20:07:16] Error: The specified path does not exist.
[2025-08-06 20:07:17] ===============================================================
[2025-08-06 20:07:17] EXECUTION STARTED
[2025-08-06 20:07:17] Arguments: [src/tests/examples/]
[2025-08-06 20:07:17] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:07:17] Java Version: 17.0.15
[2025-08-06 20:07:17] ===============================================================
[2025-08-06 20:07:17] Error: The specified path does not exist.
[2025-08-06 20:07:32] ===============================================================
[2025-08-06 20:07:32] EXECUTION STARTED
[2025-08-06 20:07:32] Arguments: [src/tests/]
[2025-08-06 20:07:32] Working Directory: C:\Users\ourai\Git\EECS4302Compiler-1
[2025-08-06 20:07:32] Java Version: 17.0.15
[2025-08-06 20:07:32] ===============================================================
[2025-08-06 20:07:32] Processing directory: C:\Users\ourai\Git\EECS4302Compiler-1\src\tests
[2025-08-06 20:07:32] Found 10 file(s) to process
[2025-08-06 20:07:32] Processing file 1/10: bank_account.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: BankAccount
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * checkStatus
[2025-08-06 20:07:32]     * compareBalance
[2025-08-06 20:07:32]   Variables: 4
[2025-08-06 20:07:32]     * minBalance: INT = 100
[2025-08-06 20:07:32]     * comparison: BOOL = true
[2025-08-06 20:07:32]     * balance: INT = 500
[2025-08-06 20:07:32]     * status: CHAR = 'A'
[2025-08-06 20:07:32] -------------------------BankAccount-------------------------
[2025-08-06 20:07:32] Functions: {checkStatus=function checkStatus ( dummy : INT ) : CHAR {
result : CHAR = L
if (balance > minBalance) {
        result = A
    }
if (balance == minBalance) {
        result = W
    }
return result
}
, compareBalance=function compareBalance ( other : INT ) : BOOL {
isHigher : BOOL = balance > other
isEqual : BOOL = balance == other
isLower : BOOL = balance < other
return isHigher
}
}
[2025-08-06 20:07:32] Variables: {Vars: checkStatus=CHAR, minBalance=INT, comparison=BOOL, balance=INT, Vars: compareBalance=BOOL, status=CHAR}
[2025-08-06 20:07:32] Evaluated Variables: {minBalance={type=INT, value=100}, comparison={type=BOOL, value=true}, balance={type=INT, value=500}, status={type=CHAR, value=A}}
[2025-08-06 20:07:32] Generated report: src/tests/bank_account-report.html
[2025-08-06 20:07:32] Processing file 2/10: calculator.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Calculator
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * compare
[2025-08-06 20:07:32]     * evaluate
[2025-08-06 20:07:32]   Variables: 4
[2025-08-06 20:07:32]     * threshold: INT = 20
[2025-08-06 20:07:32]     * comparison: BOOL = true
[2025-08-06 20:07:32]     * category: CHAR = 'M'
[2025-08-06 20:07:32]     * value: INT = 25
[2025-08-06 20:07:32] -------------------------Calculator-------------------------
[2025-08-06 20:07:32] Functions: {compare=function compare ( input : INT ) : BOOL {
isGreater : BOOL = input > threshold
return isGreater
}
, evaluate=function evaluate ( testValue : INT ) : CHAR {
result : CHAR = L
if (testValue >= 30) {
        result = H
    }
if (testValue >= 20) {
        result = M
    }
return result
}
}
[2025-08-06 20:07:32] Variables: {comparison=BOOL, Vars: compare=BOOL, threshold=INT, category=CHAR, value=INT, Vars: evaluate=CHAR}
[2025-08-06 20:07:32] Evaluated Variables: {threshold={type=INT, value=20}, comparison={type=BOOL, value=true}, category={type=CHAR, value=M}, value={type=INT, value=25}}
[2025-08-06 20:07:32] Generated report: src/tests/calculator-report.html
[2025-08-06 20:07:32] Processing file 3/10: employee.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Employee
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * updateStatus
[2025-08-06 20:07:32]     * checkAccess
[2025-08-06 20:07:32]   Variables: 5
[2025-08-06 20:07:32]     * accessGranted: BOOL = true
[2025-08-06 20:07:32]     * accessLevel: INT = 5
[2025-08-06 20:07:32]     * isActive: BOOL = true
[2025-08-06 20:07:32]     * isVerified: BOOL = false
[2025-08-06 20:07:32]     * currentStatus: BOOL = false
[2025-08-06 20:07:32] -------------------------Employee-------------------------
[2025-08-06 20:07:32] Functions: {updateStatus=function updateStatus ( newActive : BOOL ) : BOOL {
isActive = newActive
return isActive
}
, checkAccess=function checkAccess ( requiredLevel : INT ) : BOOL {
hasAccess : BOOL = isActive && accessLevel >= requiredLevel
return hasAccess
}
}
[2025-08-06 20:07:32] Variables: {accessGranted=BOOL, accessLevel=INT, isVerified=BOOL, currentStatus=BOOL, Vars: checkAccess=BOOL, isActive=BOOL, Vars: updateStatus=BOOL}
[2025-08-06 20:07:32] Evaluated Variables: {accessGranted={type=BOOL, value=true}, accessLevel={type=INT, value=5}, isActive={type=BOOL, value=true}, isVerified={type=BOOL, value=false}, currentStatus={type=BOOL, value=false}}
[2025-08-06 20:07:32] Generated report: src/tests/employee-report.html
[2025-08-06 20:07:32] Processing file 4/10: fleet.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Vehicle
[2025-08-06 20:07:32]   Functions: 1
[2025-08-06 20:07:32]     * checkAndRefuel
[2025-08-06 20:07:32]   Variables: 5
[2025-08-06 20:07:32]     * fuel2: INT = 95
[2025-08-06 20:07:32]     * fuelLevel: INT = 75
[2025-08-06 20:07:32]     * vehicleId: INT = 1001
[2025-08-06 20:07:32]     * needsRefuel: BOOL = false
[2025-08-06 20:07:32]     * fuel1: INT = 85
[2025-08-06 20:07:32] -------------------------Vehicle-------------------------
[2025-08-06 20:07:32] Functions: {checkAndRefuel=function checkAndRefuel ( amount : INT ) : INT {
fuelLevel = fuelLevel + amount
if (fuelLevel > 90) {
        needsRefuel = False
    }
if (fuelLevel <= 90) {
        needsRefuel = True
    }
return fuelLevel
}
}
[2025-08-06 20:07:32] Variables: {fuelLevel=INT, Vars: checkAndRefuel=INT, fuel2=INT, vehicleId=INT, needsRefuel=BOOL, fuel1=INT}
[2025-08-06 20:07:32] Evaluated Variables: {fuel2={type=INT, value=95}, fuelLevel={type=INT, value=75}, vehicleId={type=INT, value=1001}, needsRefuel={type=BOOL, value=false}, fuel1={type=INT, value=85}}
[2025-08-06 20:07:32] Generated report: src/tests/fleet-report.html
[2025-08-06 20:07:32] Processing file 5/10: gaming.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Player
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * calculateBonus
[2025-08-06 20:07:32]     * getScore
[2025-08-06 20:07:32]   Variables: 4
[2025-08-06 20:07:32]     * score: INT = 100
[2025-08-06 20:07:32]     * bonusScore: INT = 150
[2025-08-06 20:07:32]     * classScore: INT = 100
[2025-08-06 20:07:32]     * level: INT = 1
[2025-08-06 20:07:32] -------------------------Player-------------------------
[2025-08-06 20:07:32] Functions: {calculateBonus=function calculateBonus ( multiplier : INT ) : INT {
score : INT = 50 * multiplier
return score
}
, getScore=function getScore ( dummy : INT ) : INT {
return score
}
}
[2025-08-06 20:07:32] Variables: {score=INT, bonusScore=INT, level=INT, Vars: calculateBonus=INT, classScore=INT, Vars: getScore=INT}
[2025-08-06 20:07:32] Evaluated Variables: {score={type=INT, value=100}, bonusScore={type=INT, value=150}, classScore={type=INT, value=100}, level={type=INT, value=1}}
[2025-08-06 20:07:32] Generated report: src/tests/gaming-report.html
[2025-08-06 20:07:32] Processing file 6/10: inventory.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Product
[2025-08-06 20:07:32]   Functions: 1
[2025-08-06 20:07:32]     * updateQuantity
[2025-08-06 20:07:32]   Variables: 2
[2025-08-06 20:07:32]     * quantity: INT = 50
[2025-08-06 20:07:32]     * productId: INT = 101
[2025-08-06 20:07:32] Class: Warehouse
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * updateQuantity
[2025-08-06 20:07:32]     * getLocation
[2025-08-06 20:07:32]   Variables: 5
[2025-08-06 20:07:32]     * location: CHAR = 'A'
[2025-08-06 20:07:32]     * quantity: INT = 50
[2025-08-06 20:07:32]     * newQuantity: INT = 75
[2025-08-06 20:07:32]     * productId: INT = 101
[2025-08-06 20:07:32]     * currentLocation: CHAR = 'A'
[2025-08-06 20:07:32] -------------------------Product-------------------------
[2025-08-06 20:07:32] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
}
[2025-08-06 20:07:32] Variables: {quantity=INT, productId=INT, Vars: updateQuantity=INT}
[2025-08-06 20:07:32] Evaluated Variables: {quantity={type=INT, value=50}, productId={type=INT, value=101}}
[2025-08-06 20:07:32] -------------------------Warehouse-------------------------
[2025-08-06 20:07:32] Functions: {updateQuantity=function updateQuantity ( newQty : INT ) : INT {
quantity = newQty
return quantity
}
, getLocation=function getLocation ( dummy : INT ) : CHAR {
return location
}
}
[2025-08-06 20:07:32] Variables: {quantity=INT, Vars: getLocation=CHAR, productId=INT, Vars: updateQuantity=INT, location=CHAR, newQuantity=INT, currentLocation=CHAR}
[2025-08-06 20:07:32] Evaluated Variables: {location={type=CHAR, value=A}, quantity={type=INT, value=50}, newQuantity={type=INT, value=75}, productId={type=INT, value=101}, currentLocation={type=CHAR, value=A}}
[2025-08-06 20:07:32] Generated report: src/tests/inventory-report.html
[2025-08-06 20:07:32] Processing file 7/10: library.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Library
[2025-08-06 20:07:32]   Functions: 1
[2025-08-06 20:07:32]     * checkout
[2025-08-06 20:07:32]   Variables: 3
[2025-08-06 20:07:32]     * checkedOut: INT = 0
[2025-08-06 20:07:32]     * totalBooks: INT = 10
[2025-08-06 20:07:32]     * finalBooks: INT = 7
[2025-08-06 20:07:32] -------------------------Library-------------------------
[2025-08-06 20:07:32] Functions: {checkout=function checkout ( limit : INT ) : INT {
while (checkedOut < limit) {
totalBooks = totalBooks - 1
checkedOut = checkedOut + 1
}
return totalBooks
}
}
[2025-08-06 20:07:32] Variables: {checkedOut=INT, Vars: checkout=INT, finalBooks=INT, totalBooks=INT}
[2025-08-06 20:07:32] Evaluated Variables: {checkedOut={type=INT, value=0}, totalBooks={type=INT, value=10}, finalBooks={type=INT, value=7}}
[2025-08-06 20:07:32] Generated report: src/tests/library-report.html
[2025-08-06 20:07:32] Processing file 8/10: student.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: Student
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * updateGrade
[2025-08-06 20:07:32]     * addCredits
[2025-08-06 20:07:32]   Variables: 5
[2025-08-06 20:07:32]     * studentId: INT = 12345
[2025-08-06 20:07:32]     * finalGrade: INT = 92
[2025-08-06 20:07:32]     * totalCredits: INT = 15
[2025-08-06 20:07:32]     * credits: INT = 12
[2025-08-06 20:07:32]     * grade: INT = 85
[2025-08-06 20:07:32] -------------------------Student-------------------------
[2025-08-06 20:07:32] Functions: {updateGrade=function updateGrade ( newGrade : INT ) : INT {
grade = newGrade
return grade
}
, addCredits=function addCredits ( additionalCredits : INT ) : INT {
credits = credits + additionalCredits
return credits
}
}
[2025-08-06 20:07:32] Variables: {studentId=INT, totalCredits=INT, Vars: updateGrade=INT, credits=INT, grade=INT, finalGrade=INT, Vars: addCredits=INT}
[2025-08-06 20:07:32] Evaluated Variables: {studentId={type=INT, value=12345}, finalGrade={type=INT, value=92}, totalCredits={type=INT, value=15}, credits={type=INT, value=12}, grade={type=INT, value=85}}
[2025-08-06 20:07:32] Generated report: src/tests/student-report.html
[2025-08-06 20:07:32] Processing file 9/10: task_manager.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: TaskManager
[2025-08-06 20:07:32]   Functions: 1
[2025-08-06 20:07:32]     * processTasks
[2025-08-06 20:07:32]   Variables: 3
[2025-08-06 20:07:32]     * processedCount: INT = 5
[2025-08-06 20:07:32]     * completedTasks: INT = 0
[2025-08-06 20:07:32]     * totalTasks: INT = 0
[2025-08-06 20:07:32] -------------------------TaskManager-------------------------
[2025-08-06 20:07:32] Functions: {processTasks=function processTasks ( limit : INT ) : INT {
for (
i : INT = 1; i <= limit; i = i + 1) {
totalTasks = totalTasks + 1
if (i <= 3) {
        completedTasks = completedTasks + 1
    }
}

return totalTasks
}
}
[2025-08-06 20:07:32] Variables: {completedTasks=INT, Vars: processTasks=INT, processedCount=INT, totalTasks=INT}
[2025-08-06 20:07:32] Evaluated Variables: {processedCount={type=INT, value=5}, completedTasks={type=INT, value=0}, totalTasks={type=INT, value=0}}
[2025-08-06 20:07:32] Generated report: src/tests/task_manager-report.html
[2025-08-06 20:07:32] Processing file 10/10: weather.txt
[2025-08-06 20:07:32] No semantic errors found
[2025-08-06 20:07:32] Class: WeatherStation
[2025-08-06 20:07:32]   Functions: 2
[2025-08-06 20:07:32]     * setRain
[2025-08-06 20:07:32]     * setClear
[2025-08-06 20:07:32]   Variables: 5
[2025-08-06 20:07:32]     * clearAlert: INT = 2001
[2025-08-06 20:07:32]     * etaRange: LIST_INT = [5, 10]
[2025-08-06 20:07:32]     * rainAlert: INT = 2001
[2025-08-06 20:07:32]     * weatherCode: LIST_CHAR = [C, L, E, A, R]
[2025-08-06 20:07:32]     * stationId: INT = 2001
[2025-08-06 20:07:32] -------------------------WeatherStation-------------------------
[2025-08-06 20:07:32] Functions: {setRain=function setRain ( dummy : INT ) : INT {
weatherCode = [R, A, I, N]
etaRange = [15, 30]
return stationId
}
, setClear=function setClear ( dummy : INT ) : INT {
weatherCode = [C, L, E, A, R]
etaRange = [5, 10]
return stationId
}
}
[2025-08-06 20:07:32] Variables: {weatherCode=LIST_CHAR, clearAlert=INT, etaRange=LIST_INT, Vars: setRain=INT, rainAlert=INT, stationId=INT, Vars: setClear=INT}
[2025-08-06 20:07:32] Evaluated Variables: {clearAlert={type=INT, value=2001}, etaRange={type=LIST_INT, value=[5, 10]}, rainAlert={type=INT, value=2001}, weatherCode={type=LIST_CHAR, value=[C, L, E, A, R]}, stationId={type=INT, value=2001}}
[2025-08-06 20:07:32] Generated report: src/tests/weather-report.html
[2025-08-06 20:07:32] Processing Summary - Success: 10, Failures: 0
[2025-08-06 20:07:32] Generated combined report at src/tests/combined-report.html
[2025-08-06 20:07:32] ===============================================================
[2025-08-06 20:07:32] EXECUTION COMPLETED
[2025-08-06 20:07:32] ===============================================================
[2025-08-06 20:07:32] 
